// bootstrap（実物のため、そのままは掲載不可）

const uint8_t bootstrap[] = {
  // 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
  0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E, // 0
  0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0, // 1
  0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B, // 2
  0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9, // 3
  0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20, // 4
  0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04, // 5
  0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2, // 6
  0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06, // 7
  0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20, // 8
  0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17, // 9
  0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, // a
  0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, // b
  0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, // c
  0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C, // d
  0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20, // e
  0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50, // f
};

void (* const op_ptr_array[])(void) = {
    nop,        //0x00
    ld_r16_d16, //0x01
    ld_pr16_ar, //0x02
    inc_bc,     //0x03
    inc_br,     //0x04
    dec_br,     //0x05
    ld_br_d8,   //0x06
    rlca,       //0x07
    ld_pd16_sp, //0x08
    add_hl_r16, //0x09
    ld_ar_pr16, //0x0A
    dec_r16,    //0x0B
    inc_cr,     //0x0C
    dec_cr,     //0x0D
    ld_cr_d8,   //0x0E
    rrca,       //0x0F

    stop_0,     //0x10
    ld_r16_d16, //0x11
    ld_pr16_ar, //0x12
    inc_de,     //0x13
    inc_dr,     //0x14
    dec_dr,     //0x15
    ld_dr_d8,   //0x16
    rla,        //0x17
    jr_d8,      //0x18
    add_hl_r16, //0x19
    ld_ar_pr16, //0x1A
    dec_r16,    //0x1B
    inc_er,     //0x1C
    dec_er,     //0x1D
    ld_er_d8,   //0x1E
    rra,        //0x1F

    jr_nz_d8,   //0x20
    ld_r16_d16, //0x21
    ld_phli_ar, //0x22
    inc_hl,     //0x23
    inc_hr,     //0x24
    dec_hr,     //0x25
    ld_hr_d8,   //0x26
    daa,        //0x27
    jr_z_d8,    //0x28
    add_hl_r16, //0x29
    ld_ar_phli, //0x2A
    dec_r16,    //0x2B
    inc_lr,     //0x2C
    dec_lr,     //0x2D
    ld_lr_d8,   //0x2E
    cpl,        //0x2F

    jr_nc_d8,   //0x30
    ld_r16_d16, //0x31
    ld_phld_ar, //0x32
    inc_sp,     //0x33
    inc_phl,    //0x34
    dec_phl,    //0x35
    ld_phl_d8,  //0x36
    scf,        //0x37
    jr_c_d8,    //0x38
    add_hl_r16, //0x39
    ld_ar_phld, //0x3A
    dec_r16,    //0x3B
    inc_ar,     //0x3C
    dec_ar,     //0x3D
    ld_ar_d8,   //0x3E
    ccf,        //0x3F

    ld_r8_r8,   //0x40
    ld_r8_r8,   //0x41
    ld_r8_r8,   //0x42
    ld_r8_r8,   //0x43
    ld_r8_r8,   //0x44
    ld_r8_r8,   //0x45
    ld_br_phl,  //0x46
    ld_r8_r8,   //0x47
    ld_r8_r8,   //0x48
    ld_r8_r8,   //0x49
    ld_r8_r8,   //0x4A
    ld_r8_r8,   //0x4B
    ld_r8_r8,   //0x4C
    ld_r8_r8,   //0x4D
    ld_cr_phl,  //0x4E
    ld_r8_r8,   //0x4F

    ld_r8_r8,   //0x50
    ld_r8_r8,   //0x51
    ld_r8_r8,   //0x52
    ld_r8_r8,   //0x53
    ld_r8_r8,   //0x54
    ld_r8_r8,   //0x55
    ld_dr_phl,  //0x56
    ld_r8_r8,   //0x57
    ld_r8_r8,   //0x58
    ld_r8_r8,   //0x59
    ld_r8_r8,   //0x5A
    ld_r8_r8,   //0x5B
    ld_r8_r8,   //0x5C
    ld_r8_r8,   //0x5D
    ld_er_phl,  //0x5E
    ld_r8_r8,   //0x5F

    ld_r8_r8,   //0x60
    ld_r8_r8,   //0x61
    ld_r8_r8,   //0x62
    ld_r8_r8,   //0x63
    ld_r8_r8,   //0x64
    ld_r8_r8,   //0x65
    ld_hr_phl,  //0x66
    ld_r8_r8,   //0x67
    ld_r8_r8,   //0x68
    ld_r8_r8,   //0x69
    ld_r8_r8,   //0x6A
    ld_r8_r8,   //0x6B
    ld_r8_r8,   //0x6C
    ld_r8_r8,   //0x6D
    ld_lr_phl,  //0x6E
    ld_r8_r8,   //0x6F

    ld_phl_br,  //0x70
    ld_phl_cr,  //0x71
    ld_phl_dr,  //0x72
    ld_phl_er,  //0x73
    ld_phl_hr,  //0x74
    ld_phl_lr,  //0x75
    halt,       //0x76
    ld_phl_ar,  //0x77
    ld_r8_r8,   //0x78
    ld_r8_r8,   //0x79
    ld_r8_r8,   //0x7A
    ld_r8_r8,   //0x7B
    ld_r8_r8,   //0x7C
    ld_r8_r8,   //0x7D
    ld_ar_phl,  //0x7E
    ld_r8_r8,   //0x7F

    add_ar_r8,  //0x80
    add_ar_r8,  //0x81
    add_ar_r8,  //0x82
    add_ar_r8,  //0x83
    add_ar_r8,  //0x84
    add_ar_r8,  //0x85
    add_ar_r8,  //0x86
    add_ar_r8,  //0x87
    adc_ar_r8,  //0x88
    adc_ar_r8,  //0x89
    adc_ar_r8,  //0x8A
    adc_ar_r8,  //0x8B
    adc_ar_r8,  //0x8C
    adc_ar_r8,  //0x8D
    adc_ar_r8,  //0x8E
    adc_ar_r8,  //0x8F

    sub_ar_r8,  //0x90
    sub_ar_r8,  //0x91
    sub_ar_r8,  //0x92
    sub_ar_r8,  //0x93
    sub_ar_r8,  //0x94
    sub_ar_r8,  //0x95
    sub_ar_r8,  //0x96
    sub_ar_r8,  //0x97
    sbc_ar_r8,  //0x98
    sbc_ar_r8,  //0x99
    sbc_ar_r8,  //0x9A
    sbc_ar_r8,  //0x9B
    sbc_ar_r8,  //0x9C
    sbc_ar_r8,  //0x9D
    sbc_ar_r8,  //0x9E
    sbc_ar_r8,  //0x9F

    and_r8,     //0xA0
    and_r8,     //0xA1
    and_r8,     //0xA2
    and_r8,     //0xA3
    and_r8,     //0xA4
    and_r8,     //0xA5
    and_ar_phl, //0xA6
    and_r8,     //0xA7
    xor_ar_r8,  //0xA8
    xor_ar_r8,  //0xA9
    xor_ar_r8,  //0xAA
    xor_ar_r8,  //0xAB
    xor_ar_r8,  //0xAC
    xor_ar_r8,  //0xAD
    xor_ar_r8,  //0xAE
    xor_ar_r8,  //0xAF

    or_r8,      //0xB0
    or_r8,      //0xB1
    or_r8,      //0xB2
    or_r8,      //0xB3
    or_r8,      //0xB4
    or_r8,      //0xB5
    or_ar_phl,  //0xB6
    or_r8,      //0xB7
    cp_br,      //0xB8
    cp_cr,      //0xB9
    cp_dr,      //0xBA
    cp_er,      //0xBB
    cp_hr,      //0xBC
    cp_lr,      //0xBD
    cp_phl,      //0xBE
    cp_ar,      //0xBF

    ret_nz,     //0xC0
    pop_r16,    //0xC1
    jp_cc_d16,  //0xC2
    jp_d16,     //0xC3
    call_cc_d16,//0xC4
    push_r16,   //0xC5
    add_ar_d8,  //0xC6
    rst_vec,    //0xC7
    ret_z,      //0xC8
    ret,        //0xC9
    jp_cc_d16,  //0xCA
    nop,        //0xCB
    call_cc_d16,//0xCC
    call_d16,   //0xCD
    adc_ar_d8,  //0xCE
    rst_vec,    //0xCF

    ret_nc,     //0xD0
    pop_r16,    //0xD1
    jp_cc_d16,  //0xD2
    nop,        //0xD3
    call_cc_d16,//0xD4
    push_r16,   //0xD5
    sub_ar_d8,  //0xD6
    rst_vec,    //0xD7
    ret_c,      //0xD8
    reti,       //0xD9
    jp_cc_d16,  //0xDA
    nop,        //0xDB
    call_cc_d16,//0xDC
    nop,        //0xDD
    sbc_ar_d8,  //0xDE
    rst_vec,    //0xDF

    ldh_pd8_ar, //0xE0
    pop_r16,    //0xE1
    ld_pcr_ar,  //0xE2
    nop,        //0xE3
    nop,        //0xE4
    push_r16,   //0xE5
    and_d8,     //0xE6
    rst_vec,    //0xE7
    add_sp_d8,  //0xE8
    jp_hl,      //0xE9
    ld_pa16_ar, //0xEA
    nop,        //0xEB
    nop,        //0xEC
    nop,        //0xED
    xor_ar_d8,  //0xEE
    rst_vec,    //0xEF

    ldh_ar_pd8, //0xF0
    pop_r16,    //0xF1
    ld_ar_pcr,  //0xF2
    di,         //0xF3
    nop,        //0xF4
    push_r16,   //0xF5
    or_d8,      //0xF6
    rst_vec,    //0xF7
    ld_hl_sp_d8,//0xF8
    ld_sp_hl,   //0xF9
    ld_ar_pa16, //0xFA
    ei,         //0xFB
    nop,        //0xFC
    nop,        //0xFD
    cp_d8,      //0xFE
    rst_vec,    //0xFF
};

void (* const pf_op_ptr_array[])(void) = {
    rlc_r8,     //0x00
    rlc_r8,     //0x01
    rlc_r8,     //0x02
    rlc_r8,     //0x03
    rlc_r8,     //0x04
    rlc_r8,     //0x05
    rlc_phl,    //0x06
    rlc_r8,     //0x07
    rrc_r8,     //0x08
    rrc_r8,     //0x09
    rrc_r8,     //0x0A
    rrc_r8,     //0x0B
    rrc_r8,     //0x0C
    rrc_r8,     //0x0D
    rrc_phl,    //0x0E
    rrc_r8,     //0x0F

    rl_r8,      //0x10
    rl_r8,      //0x11
    rl_r8,      //0x12
    rl_r8,      //0x13
    rl_r8,      //0x14
    rl_r8,      //0x15
    rl_phl,     //0x16
    rl_r8,      //0x17
    rr_r8,      //0x18
    rr_r8,      //0x19
    rr_r8,      //0x1A
    rr_r8,      //0x1B
    rr_r8,      //0x1C
    rr_r8,      //0x1D
    rr_phl,     //0x1E
    rr_r8,      //0x1F

    sla_r8,     //0x20
    sla_r8,     //0x21
    sla_r8,     //0x22
    sla_r8,     //0x23
    sla_r8,     //0x24
    sla_r8,     //0x25
    sla_phl,    //0x26
    sla_r8,     //0x27
    sra_r8,     //0x28
    sra_r8,     //0x29
    sra_r8,     //0x2A
    sra_r8,     //0x2B
    sra_r8,     //0x2C
    sra_r8,     //0x2D
    sra_phl,    //0x2E
    sra_r8,     //0x2F

    swap,       //0x30
    swap,       //0x31
    swap,       //0x32
    swap,       //0x33
    swap,       //0x34
    swap,       //0x35
    swap_phl,   //0x36
    swap,       //0x37
    srl_r8,     //0x38
    srl_r8,     //0x39
    srl_r8,     //0x3A
    srl_r8,     //0x3B
    srl_r8,     //0x3C
    srl_r8,     //0x3D
    srl_phl,    //0x3E
    srl_r8,     //0x3F

    bit_,       //0x40
    bit_,       //0x41
    bit_,       //0x42
    bit_,       //0x43
    bit_,       //0x44
    bit_,       //0x45
    bit_phl,    //0x46
    bit_,       //0x47
    bit_,       //0x48
    bit_,       //0x49
    bit_,       //0x4A
    bit_,       //0x4B
    bit_,       //0x4C
    bit_,       //0x4D
    bit_phl,    //0x4E
    bit_,       //0x4F

    bit_,       //0x50
    bit_,       //0x51
    bit_,       //0x52
    bit_,       //0x53
    bit_,       //0x54
    bit_,       //0x55
    bit_phl,    //0x56
    bit_,       //0x57
    bit_,       //0x58
    bit_,       //0x59
    bit_,       //0x5A
    bit_,       //0x5B
    bit_,       //0x5C
    bit_,       //0x5D
    bit_phl,    //0x5E
    bit_,       //0x5F

    bit_,       //0x60
    bit_,       //0x61
    bit_,       //0x62
    bit_,       //0x63
    bit_,       //0x64
    bit_,       //0x65
    bit_phl,    //0x66
    bit_,       //0x67
    bit_,       //0x68
    bit_,       //0x69
    bit_,       //0x6A
    bit_,       //0x6B
    bit_,       //0x6C
    bit_,       //0x6D
    bit_phl,    //0x6E
    bit_,       //0x6F

    bit_,       //0x70
    bit_,       //0x71
    bit_,       //0x72
    bit_,       //0x73
    bit_,       //0x74
    bit_,       //0x75
    bit_phl,    //0x76
    bit_,       //0x77
    bit_,       //0x78
    bit_,       //0x79
    bit_,       //0x7A
    bit_,       //0x7B
    bit_,       //0x7C
    bit_,       //0x7D
    bit_phl,    //0x7E
    bit_,       //0x7F

    res,        //0x80
    res,        //0x81
    res,        //0x82
    res,        //0x83
    res,        //0x84
    res,        //0x85
    res_phl,    //0x86
    res,        //0x87
    res,        //0x88
    res,        //0x89
    res,        //0x8A
    res,        //0x8B
    res,        //0x8C
    res,        //0x8D
    res_phl,    //0x8E
    res,        //0x8F

    res,        //0x90
    res,        //0x91
    res,        //0x92
    res,        //0x93
    res,        //0x94
    res,        //0x95
    res_phl,    //0x96
    res,        //0x97
    res,        //0x98
    res,        //0x99
    res,        //0x9A
    res,        //0x9B
    res,        //0x9C
    res,        //0x9D
    res_phl,    //0x9E
    res,        //0x9F

    res,        //0xA0
    res,        //0xA1
    res,        //0xA2
    res,        //0xA3
    res,        //0xA4
    res,        //0xA5
    res_phl,    //0xA6
    res,        //0xA7
    res,        //0xA8
    res,        //0xA9
    res,        //0xAA
    res,        //0xAB
    res,        //0xAC
    res,        //0xAD
    res_phl,    //0xAE
    res,        //0xAF

    res,        //0xB0
    res,        //0xB1
    res,        //0xB2
    res,        //0xB3
    res,        //0xB4
    res,        //0xB5
    res_phl,    //0xB6
    res,        //0xB7
    res,        //0xB8
    res,        //0xB9
    res,        //0xBA
    res,        //0xBB
    res,        //0xBC
    res,        //0xBD
    res_phl,    //0xBE
    res,        //0xBF

    set,        //0xC0
    set,        //0xC1
    set,        //0xC2
    set,        //0xC3
    set,        //0xC4
    set,        //0xC5
    set_phl,    //0xC6
    set,        //0xC7
    set,        //0xC8
    set,        //0xC9
    set,        //0xCA
    set,        //0xCB
    set,        //0xCC
    set,        //0xCD
    set_phl,    //0xCE
    set,        //0xCF

    set,        //0xD0
    set,        //0xD1
    set,        //0xD2
    set,        //0xD3
    set,        //0xD4
    set,        //0xD5
    set_phl,    //0xD6
    set,        //0xD7
    set,        //0xD8
    set,        //0xD9
    set,        //0xDA
    set,        //0xDB
    set,        //0xDC
    set,        //0xDD
    set_phl,    //0xDE
    set,        //0xDF

    set,        //0xE0
    set,        //0xE1
    set,        //0xE2
    set,        //0xE3
    set,        //0xE4
    set,        //0xE5
    set_phl,    //0xE6
    set,        //0xE7
    set,        //0xE8
    set,        //0xE9
    set,        //0xEA
    set,        //0xEB
    set,        //0xEC
    set,        //0xED
    set_phl,    //0xEE
    set,        //0xEF

    set,        //0xF0
    set,        //0xF1
    set,        //0xF2
    set,        //0xF3
    set,        //0xF4
    set,        //0xF5
    set_phl,    //0xF6
    set,        //0xF7
    set,        //0xF8
    set,        //0xF9
    set,        //0xFA
    set,        //0xFB
    set,        //0xFC
    set,        //0xFD
    set_phl,    //0xFE
    set,        //0xFF
};
