#define HBYTE(u) ((u >> 8) & 0xFF)
#define LBYTE(u) (u & 0xFF)
#define AF(A, F) ((uint16_t)A << 8) | F
#define BC(B, C) ((uint16_t)B << 8) | C
#define DE(D, E) ((uint16_t)D << 8) | E
#define HL(H, L) ((uint16_t)H << 8) | L

#define MOSI  11    // MOSI　本来ならGP3 ArduinoIDE上でpinassignが変更可能になったらHWSPIに切り替え
#define CLK   10    // CLK　本来ならGP2
#define CS    9     // Data/Command
#define DC    8     // Data/Command
#define RST   12    // RESET
#define BL    13    // BACK LIGHT

#define MBC_NOT_SUPPORTED  -1
#define MBC_NONE            0
#define MBC_1               1
#define MBC_2               2
#define MBC_3               3
#define MBC_5               5

void ld_br_d8();
void ld_cr_d8();
void ld_dr_d8();
void ld_er_d8();
void ld_hr_d8();
void ld_lr_d8();
void ld_ar_d8();
void ld_br_phl();
void ld_cr_phl();
void ld_dr_phl();
void ld_er_phl();
void ld_hr_phl();
void ld_lr_phl();
void ld_ar_phl();
void ld_br_br();
void ld_br_cr();
void ld_br_dr();
void ld_br_er();
void ld_br_hr();
void ld_br_lr();
void ld_br_ar();
void ld_cr_br();
void ld_cr_cr();
void ld_cr_dr();
void ld_cr_er();
void ld_cr_hr();
void ld_cr_lr();
void ld_cr_ar();
void ld_dr_br();
void ld_dr_cr();
void ld_dr_dr();
void ld_dr_er();
void ld_dr_hr();
void ld_dr_lr();
void ld_dr_ar();
void ld_er_br();
void ld_er_cr();
void ld_er_dr();
void ld_er_er();
void ld_er_hr();
void ld_er_lr();
void ld_er_ar();
void ld_hr_br();
void ld_hr_cr();
void ld_hr_dr();
void ld_hr_er();
void ld_hr_hr();
void ld_hr_lr();
void ld_hr_ar();
void ld_lr_br();
void ld_lr_cr();
void ld_lr_dr();
void ld_lr_er();
void ld_lr_hr();
void ld_lr_lr();
void ld_lr_ar();
void ld_ar_br();
void ld_ar_cr();
void ld_ar_dr();
void ld_ar_er();
void ld_ar_hr();
void ld_ar_lr();
void ld_ar_ar();
void ld_phl_br();
void ld_phl_cr();
void ld_phl_dr();
void ld_phl_er();
void ld_phl_hr();
void ld_phl_lr();
void ld_phl_ar();
void ld_phl_d8();
void ld_ar_pr16();
void ld_ar_phli();
void ld_ar_phld();
void ld_pbc_ar();
void ld_pde_ar();
void ld_phli_ar();
void ld_phld_ar();
void nop();
void inc_bc();
void inc_de();
void inc_hl();
void inc_sp();
void dec_bc();
void dec_de();
void dec_hl();
void dec_sp();
void inc_br();
void inc_cr();
void inc_dr();
void inc_er();
void inc_hr();
void inc_lr();
void inc_ar();
void dec_br();
void dec_cr();
void dec_dr();
void dec_er();
void dec_hr();
void dec_lr();
void dec_ar();
void xor_ar_br();
void xor_ar_cr();
void xor_ar_dr();
void xor_ar_er();
void xor_ar_hr();
void xor_ar_lr();
void xor_ar_phl();
void xor_ar_ar();
void sub_ar_br();
void sub_ar_cr();
void sub_ar_dr();
void sub_ar_er();
void sub_ar_hr();
void sub_ar_lr();
void sub_ar_phl();
void sub_ar_ar();
void add_ar_br();
void add_ar_cr();
void add_ar_dr();
void add_ar_er();
void add_ar_hr();
void add_ar_lr();
void add_ar_phl();
void add_ar_ar();
void cp_br();
void cp_cr();
void cp_dr();
void cp_er();
void cp_hr();
void cp_lr();
void cp_phl();
void cp_ar();
void jr_d8();
void jr_nz_d8();
void jr_z_d8();
void jr_nc_d8();
void jr_c_d8();
void ld_bc_d16();
void ld_de_d16();
void ld_hl_d16();
void ld_sp_d16();
void rla();
void ldh_pd8_ar();
void ldh_ar_pd8();
void pop_bc();
void pop_de();
void pop_hl();
void pop_af();
void ld_pcr_ar();
void ld_ar_pcr();
void di();
void ei();
void push_r16();
void push_bc();
void push_de();
void push_hl();
void push_af();
void ret();
void call_d16();
void cp_d8();
void rl_r8();
void swap();
void bit_();
void res();
void set();
void jp_d16();
void cpl();
void ccf();
void and_d8();
void or_d8();
void or_br();
void or_cr();
void or_dr();
void or_er();
void or_hr();
void or_lr();
void or_ar();
void and_br();
void and_cr();
void and_dr();
void and_er();
void and_hr();
void and_lr();
void and_ar();
void ld_ar_pa16();
void ld_pa16_ar();
void ret_nz();
void ret_nc();
void ret_z();
void ret_c();
void reti();
void add_hl_sp();
void add_hl_bc();
void add_hl_de();
void add_hl_hl();
void stop_0();
void jp_cc_d16();
void call_cc_d16();
void adc_ar_br();
void adc_ar_cr();
void adc_ar_dr();
void adc_ar_er();
void adc_ar_hr();
void adc_ar_lr();
void adc_ar_phl();
void adc_ar_ar();
void rst_vec();
void sbc_ar_br();
void sbc_ar_cr();
void sbc_ar_dr();
void sbc_ar_er();
void sbc_ar_hr();
void sbc_ar_lr();
void sbc_ar_phl();
void sbc_ar_ar();
void add_ar_d8();
void adc_ar_d8();
void sub_ar_d8();
void sbc_ar_d8();
void sla_r8();
void rlc_r8();
void srl_br();
void srl_cr();
void srl_dr();
void srl_er();
void srl_hr();
void srl_lr();
void srl_ar();
void sra_r8();
void rr_br();
void rr_cr();
void rr_dr();
void rr_er();
void rr_hr();
void rr_lr();
void rr_ar();
void rra();
void xor_ar_d8();
void or_ar_phl();
void and_ar_phl();
void dec_phl();
void inc_phl();
void halt();
void rlca();
void daa();
void scf();
void ld_pd16_sp();
void add_sp_d8();
void jp_hl();
void ld_sp_hl();
void rrca();
void ld_hl_sp_d8();
void swap_phl();
void sla_phl();
void rrc_r8();
void set_phl();
void res_phl();
void bit_phl();
void rlc_phl();
void rl_phl();
void rrc_phl();
void rr_phl();
void sra_phl();
void srl_phl();
void call_irpt(uint16_t addr);
